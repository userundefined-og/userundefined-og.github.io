<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code and design on Blog of the Dad</title><link>https://blog.dawnofthe.dad/tags/code-and-design/</link><description>Recent content in Code and design on Blog of the Dad</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 21 Sep 2023 22:16:25 -0700</lastBuildDate><atom:link href="https://blog.dawnofthe.dad/tags/code-and-design/index.xml" rel="self" type="application/rss+xml"/><item><title>All Different Variants</title><link>https://blog.dawnofthe.dad/posts/all-different-variants/</link><pubDate>Sun, 05 Nov 2023 21:21:01 -0800</pubDate><guid>https://blog.dawnofthe.dad/posts/all-different-variants/</guid><description>&lt;p>In the earlier posts I&amp;rsquo;ve described some of the basic ideas behind CSPs:&lt;/p>&lt;ul>&lt;li>how the problems are represented using variables and constraints,&lt;/li>&lt;li>how the solver searches for a solution by building up the search tree,&lt;/li>&lt;li>how heuristics guide the search, and&lt;/li>&lt;li>how constraint propagation helps eliminate parts of the search space that will not contain solutions.&lt;/li>&lt;/ul>&lt;p>In this post I will look at how modeling the problem itself can have a significant influence on how quickly the solver is able to find a solution. In particular, I&amp;rsquo;ll talk about different ways of implementing the &lt;em>all-different&lt;/em> constraint, and look at the various implementations&amp;rsquo; performance characteristics.&lt;/p>&lt;h2 id="choices-choices">Choices, choices&amp;hellip;&lt;/h2>&lt;p>An interesting thing about CSPs is that for a given problem type there is often more than one way to model it. For example, when I spoke about &lt;a href="https://blog.dawnofthe.dad/posts/solver-basics/">modeling the N-queens problem&lt;/a> I said that one way to prevent queens from attacking each other diagonally is to ensure that if any pair of queens are connected by a line the slope of that line isn&amp;rsquo;t 1 or -1. Another way to achieve the same result is to enumerate diagonals of the NxN chessboard, and make sure that all queens are assigned to different diagonals (each queen will claim two diagonals - one from bottom left to top right and another from top left to bottom right). Both representations are totally valid, but the performance of search will vary depending on how the problem is modeled, and how the underlying constraints are implemented.&lt;/p>&lt;p>In fact, the &amp;ldquo;all diagonals must be different&amp;rdquo; constraint can be implemented by having binary constraints, one for each pair of queens, that ensure that the queens don&amp;rsquo;t each other diagonally, which is exactly how I&amp;rsquo;ve described the problem originally. Importantly though, the all-different constraint could be implemented very differently.&lt;/p>&lt;h2 id="all-different-constraint">All different constraint&lt;/h2>&lt;p>Before getting too far ahead, let&amp;rsquo;s formally define what an &lt;em>all-different&lt;/em> constraint means. Recall that a CSP itself is composed of variables, each with a domain of possible values, and constraints on those variables. An &lt;em>all-different&lt;/em> constraint may defined on any subset of variables of the overall problem, and it is satisfied if the following condition is true:$$ \forall u, v \in C_V: value(u) \ne value(v) $$&lt;/p>&lt;p>From this representation, it&amp;rsquo;s easy to see why it can be tempting, and totally valid, to model this constraint just as a set of binary &lt;em>not-equals&lt;/em> constraints.&lt;/p>&lt;h3 id="constraint-interface">Constraint interface&lt;/h3>&lt;p>In my solver all constraints implement the following interface:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Constraint&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Variables&lt;/span>() []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Variable&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Supported&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Variable&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the solver applies constraint propagation it checks constraints by iterating over its &lt;code>Variables()&lt;/code> and checking whether the remaining values in each of the variable&amp;rsquo;s live domains are still &lt;code>Supported()&lt;/code> by the constraint. When they are not, they are removed as no solution can exist with that variable-value assignment. You can see how constraint propagation works in the &lt;a href="https://blog.dawnofthe.dad/posts/constraint-propagation/">earlier post&lt;/a>.&lt;/p>&lt;h2 id="all-different-constraint-implementations">All-different constraint implementations&lt;/h2>&lt;p>There are many ways to enforce this constraint. Let&amp;rsquo;s look at a bunch.&lt;/p>&lt;h3 id="binary">Binary&lt;/h3>&lt;p>We&amp;rsquo;ve already covered the simplest, which boils down to taking each pair of variables and adding binary &lt;em>not-equal&lt;/em> constraints. This is exactly what we did with N-queens, and results in a quadratic number of binary constraints. One big benefit of this approach is just how easy it is to understand and implement.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">buildBinaryAllDiff&lt;/span>(&lt;span style="color:#a6e22e">vs&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span>) []&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Constraint&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cs&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Constraint&lt;/span>{}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; len(&lt;span style="color:#a6e22e">vs&lt;/span>); &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; len(&lt;span style="color:#a6e22e">vs&lt;/span>); &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cs&lt;/span> = append(&lt;span style="color:#a6e22e">cs&lt;/span>, &lt;span style="color:#a6e22e">binary&lt;/span>.&lt;span style="color:#a6e22e">NewNotEquals&lt;/span>(&lt;span style="color:#a6e22e">vs&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>], &lt;span style="color:#a6e22e">vs&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>]))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cs&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="basic">Basic&lt;/h3>&lt;p>Rather than defining many binary constraints, we can do a bit better by defining a single constraint that tracks variables with one live value left and disallows assigning that value to any of the other variables.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">allDiffBasic&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> { &lt;span style="color:#a6e22e">vs&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">allDiffBasic&lt;/span>) &lt;span style="color:#a6e22e">Variables&lt;/span>() []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">vs&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">allDiffBasic&lt;/span>) &lt;span style="color:#a6e22e">Supported&lt;/span>(&lt;span style="color:#a6e22e">supV&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span>, &lt;span style="color:#a6e22e">supVal&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">other&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">vs&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">supV&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">other&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">other&lt;/span>.&lt;span style="color:#a6e22e">LiveLeft&lt;/span>() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">other&lt;/span>.&lt;span style="color:#a6e22e">LiveDomain&lt;/span>().&lt;span style="color:#a6e22e">LastLiveValue&lt;/span>() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">supVal&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sparse">Sparse&lt;/h3>&lt;p>This one is a little bit more clever by being incremental and tracking state change - whenever a variable is assigned, we track which value is &amp;ldquo;claimed&amp;rdquo; and disallow other variables from that value, and when a variable is unassigned, we allow other variables to be assigned to that value again. You can see that happening in the &lt;code>Set()&lt;/code> and &lt;code>Cleared()&lt;/code> methods below, which are part of incremental interface (not shown).&lt;/p>&lt;p>This is very similar in spirit to &amp;ldquo;Basic&amp;rdquo;, but doesn&amp;rsquo;t require explicitly checking every variable whenever we&amp;rsquo;re seeing if the constraint is violated. The reason I call this type of implementation &lt;em>sparse&lt;/em> is because it works well when we have many values to choose from. This is the implementation I use for the &lt;a href="https://dawnofthe.dad/crossword">crossword builder&lt;/a>, for ensuring words are not repeated - there are very many words in the dictionary to choose from&amp;hellip; but more on this another time.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">allDiffSparse&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">vs&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">claimedValues&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">int&lt;/span>]&lt;span style="color:#66d9ef">bool&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">allDiffSparse&lt;/span>) &lt;span style="color:#a6e22e">Variables&lt;/span>() []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">vs&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">allDiffSparse&lt;/span>) &lt;span style="color:#a6e22e">Supported&lt;/span>(&lt;span style="color:#a6e22e">supV&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span>, &lt;span style="color:#a6e22e">supVal&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> !&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">claimedValues&lt;/span>[&lt;span style="color:#a6e22e">supVal&lt;/span>]&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">allDiffSparse&lt;/span>) &lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">claimedValues&lt;/span>[&lt;span style="color:#a6e22e">value&lt;/span>] = &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">allDiffSparse&lt;/span>) &lt;span style="color:#a6e22e">Cleared&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span>, &lt;span style="color:#a6e22e">prevValue&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> delete(&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">claimedValues&lt;/span>, &lt;span style="color:#a6e22e">prevValue&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pigeonhole">Pigeonhole&lt;/h3>&lt;p>This implementation is based on the &lt;a href="https://en.wikipedia.org/wiki/Pigeonhole_principle">Pigeonhole principle&lt;/a>, which, to quote Wikipedia, &lt;em>states that if n items are put into m containers, with n &amp;gt; m, then at least one container must contain more than one item&lt;/em>. In other words, if we ever get to a state where we have fewer values left to choose from than unassigned variables, we know that the &lt;em>all-different&lt;/em> constraint cannot be met. For example, this implementation can detect that if we have three variables, each with domain of {1, 2}, no solution is possible. The more naive implementations would not. So while they all will enforce the constraint given a full assignment, this one can detect infeasibility earlier, saving us from pointlessly trying to find a solution when none exist.&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">allDiffPigeonHole&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> { &lt;span style="color:#a6e22e">vs&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">allDiffPigeonHole&lt;/span>) &lt;span style="color:#a6e22e">Variables&lt;/span>() []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">vs&lt;/span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">allDiffPigeonHole&lt;/span>) &lt;span style="color:#a6e22e">Supported&lt;/span>(&lt;span style="color:#a6e22e">supV&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span>, &lt;span style="color:#a6e22e">supVal&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otherVals&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">int&lt;/span>]&lt;span style="color:#66d9ef">bool&lt;/span>{}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">other&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">vs&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">supV&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">other&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">atLeastOneSupport&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">other&lt;/span>.&lt;span style="color:#a6e22e">LiveDomain&lt;/span>().&lt;span style="color:#a6e22e">ForEachValue&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">supVal&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otherVals&lt;/span>[&lt;span style="color:#a6e22e">value&lt;/span>] = &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">atLeastOneSupport&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">atLeastOneSupport&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> len(&lt;span style="color:#a6e22e">otherVals&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> len(&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">vs&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bi-partite">Bi-partite&lt;/h3>&lt;p>This implementation is the most thorough, because it performs a bi-partite match from variables on one side to possible values on the other, and only succeeds when a maximum match exists. In other words, given a partial assignment of values to variables, this constraint will only remain feasible when a possible all-different assignment still exists. An overly simple example to demonstrate that this implementation is more powerful than pigeonhole one is this:&lt;/p>&lt;ul>&lt;li>A problem with 3 variables: X, Y and Z.&lt;/li>&lt;li>X must be 1, Y must 1, but Z can be either 2 or 3.&lt;/li>&lt;li>Pigeonhole implementation will say there are 3 values and 3 variables, so a solution might exist, but clearly there is no maximal bipartite match as X and Y will be equal, so the more sophisticated bipartite implementation will flag this as an infeasible state.&lt;/li>&lt;li>As a side-note, while pigeonhole wouldn&amp;rsquo;t detect infeasibilty in this example, all of the simpler constraints would. So it&amp;rsquo;s not true that pigeonhole is strictly stronger than the simpler implementations, but it is true that the bipartite one is.&lt;/li>&lt;/ul>&lt;p>There&amp;rsquo;s ~250 lines of code for this one, so I won&amp;rsquo;t include that verbatim, but in short this implementation uses Hopcroft-Karp maximum matching algorithm, porting &lt;a href="https://www.geeksforgeeks.org/hopcroft-karp-algorithm-for-maximum-matching-set-2-implementation/">this implementation&lt;/a> to Go, and adds incremental state tracking; e.g., by removing edges from the match as variables are assigned. When the constraint is re-evaluated via &lt;code>Supported()&lt;/code>, this allows to start from a partial and often mostly complete matching, rather than from scratch.&lt;/p>&lt;h2 id="comparing-performance">Comparing performance&lt;/h2>&lt;p>Cool, so we&amp;rsquo;ve got the implementations. We know that ultimately they&amp;rsquo;ll all give us to a valid sudoku, but what is their performance like? Let&amp;rsquo;s look!&lt;/p>&lt;h3 id="the-setup">The setup&lt;/h3>&lt;p>We&amp;rsquo;ll be looking at generalized NxN sudokus, as they are effectively one big glob of variables, one per sudoku cell, and &lt;em>all-different&lt;/em> constraints enforcing horizontal, vertical and block uniqueness. We&amp;rsquo;ll search for the first, randomly encountered solution, and to do so we&amp;rsquo;ll be using a solver with randomized variable and value ordering &lt;a href="https://blog.dawnofthe.dad/posts/heuristics/">heuristics&lt;/a> and apply &lt;a href="https://blog.dawnofthe.dad/posts/constraint-propagation/">forward checking&lt;/a> after every assignment. We&amp;rsquo;ll be looking at sudokus of sizes 16x16, 25x25 and 36x36. You can also try most of these &lt;a href="https://dawnofthe.dad/ndoku">online&lt;/a>.&lt;/p>&lt;p>We&amp;rsquo;ll cover two basic metrics - time taken by the solver, and the number of steps the solver took, to reach the first solution. End users will typically only care about the time taken, but the number of steps can give us some insights into how our constraints work.&lt;/p>&lt;p>We&amp;rsquo;ll be using Go&amp;rsquo;s benchmarking tests to evaluate performance of these implementations. Here&amp;rsquo;s what this benchmark/test looks like:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">timeout&lt;/span> = &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Minute&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">experiment&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// For my sudokus &amp;#34;size&amp;#34; is the size of a subsquare, so &lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// &amp;#34;size = 3&amp;#34; results in a regular 9x9 sudoku, and so on.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">kind&lt;/span> &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">AlgoKind&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">experiments&lt;/span> = []&lt;span style="color:#a6e22e">experiment&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;basic&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Basic&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;binary&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Binary&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sparse&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Sparse&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pigeonhole&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Pigeonhole&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bipartite&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Bipartite&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;basic-lg&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Basic&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;binary-lg&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Binary&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sparse-lg&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Sparse&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pigeonhole-lg&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Pigeonhole&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bipartite-lg&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Bipartite&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;basic-vlg&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Basic&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;binary-vlg&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Binary&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;sparse-vlg&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Sparse&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pigeonhole-vlg&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Pigeonhole&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;bipartite-vlg&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#a6e22e">kind&lt;/span>: &lt;span style="color:#a6e22e">alldiff&lt;/span>.&lt;span style="color:#a6e22e">Bipartite&lt;/span>},&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">solveSudoku&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#a6e22e">experiment&lt;/span>) (&lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sudoku&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">GeneralizedSudoku&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>, &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>{}, &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">kind&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">VariableHeuristic&lt;/span>: &lt;span style="color:#a6e22e">search&lt;/span>.&lt;span style="color:#a6e22e">NewDomWDegVariableHeuristic&lt;/span>(&lt;span style="color:#a6e22e">sudoku&lt;/span>),&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ValueHeuristic&lt;/span>: &lt;span style="color:#a6e22e">search&lt;/span>.&lt;span style="color:#a6e22e">NewRandomValueHeuristic&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>().&lt;span style="color:#a6e22e">UTC&lt;/span>().&lt;span style="color:#a6e22e">UnixNano&lt;/span>()),&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>.&lt;span style="color:#a6e22e">NewSearch&lt;/span>(&lt;span style="color:#a6e22e">sudoku&lt;/span>, &lt;span style="color:#a6e22e">config&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">cancel&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">WithTimeout&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>(), &lt;span style="color:#a6e22e">timeout&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">cancel&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">solved&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">solved&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Steps&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BenchmarkSudoku&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">experiments&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">OpenFile&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;benchmarks/&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;.dat&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">O_RDWR&lt;/span>|&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">O_CREATE&lt;/span>|&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">O_TRUNC&lt;/span>, &lt;span style="color:#ae81ff">0755&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bufio&lt;/span>.&lt;span style="color:#a6e22e">NewWriter&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">N&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">start&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">solved&lt;/span>, &lt;span style="color:#a6e22e">steps&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">solveSudoku&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">timeTaken&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Since&lt;/span>(&lt;span style="color:#a6e22e">start&lt;/span>).&lt;span style="color:#a6e22e">Microseconds&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">WriteString&lt;/span>(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%v %v %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">timeTaken&lt;/span>, &lt;span style="color:#a6e22e">steps&lt;/span>, &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">FormatBool&lt;/span>(&lt;span style="color:#a6e22e">solved&lt;/span>)))&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Flush&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">f&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The performance data is then generated via:&lt;/p>&lt;p>&lt;code>go test -bench=BenchmarkSudoku -benchtime=500x -run=^# -timeout=24h&lt;/code>&lt;/p>&lt;p>and plotted with gnuplot. I generated 1000 instances for 16x16, 500 for 25x25, and 200 for 36x36 graphs.&lt;/p>&lt;h3 id="steps-taken">Steps taken&lt;/h3>&lt;p>We&amp;rsquo;ll look at steps taken first, because there is a clear winner - as one might expect, the most sophisticated bipartite implementation wins hands-down. In fact, if you try it online with lexicographic ordering you&amp;rsquo;ll notice that it rarely needs to backtrack. Even with randomized ordering it backtracks far less than the alternatives.&lt;/p>&lt;p>Here is the performance of the five implementations for 16x16 sudokus (all graphs in this post are &lt;a href="https://en.wikipedia.org/wiki/Cumulative_distribution_function">cumulative distribution functions&lt;/a>):&lt;/p>&lt;p>&lt;img src="https://blog.dawnofthe.dad/plots/cdf-steps.png" alt="16x16 Sudoku - steps taken">&lt;/p>&lt;p>Bipartite is the fastest, and it is followed closely by pigeonhole. Basic is in third, followed by binary, and with sparse coming in last. These last three don&amp;rsquo;t perform particularly great in terms of steps taken. One interesting bit is that basic takes slightly fewer steps than sparse - I think this is because it is slightly more aggresive at removing values, as it considers all variables with one variable, rather that just assigned variables like sparse does (so it can cover cases where a variable is not assigned yet, but its live domain only has one value left).&lt;/p>&lt;h3 id="runtime">Runtime&lt;/h3>&lt;p>&lt;img src="https://blog.dawnofthe.dad/plots/cdf-time.png" alt="16x16 Sudoku - time taken">&lt;/p>&lt;p>Pretty different from steps taken, eh? Let&amp;rsquo;s see what&amp;rsquo;s going on here:&lt;/p>&lt;ul>&lt;li>Sparse, the slowest in terms of number of steps, is performing really well when it comes to time. Why? There are a couple of reasons: the speed of evaluating a given constraint, and the fact that we only have one constraint for each set of 16 cells. It&amp;rsquo;s fast because it incrementally maintains state, and when asked if a value is still viable just checks if it has already been taken. And, unlike binary constraints, where we&amp;rsquo;d have 120 binary constraints to represent all-difference of 16 cells (15 * 16 / 2 = 120), there&amp;rsquo;s only one constraint to check. 16x16 sudokus also appear to be under-constrained, so this fast, simple implementation, does well.&lt;/li>&lt;li>Basic comes in next. This isn&amp;rsquo;t too surprising given it is similar to sparse, but not incremental, and hence a bit slower, despite taking fewer steps.&lt;/li>&lt;li>Bipartite follows. It&amp;rsquo;s sophisticated, but slower than the simpler implementations above. It &lt;em>is&lt;/em> incremental though, which is important in that when the state changes, the re-evaluations are generally quick.&lt;/li>&lt;li>Binary is second to last for most percentiles (and in fact it is the worst at high percentiles). Here, we have the benefits of &amp;ldquo;simple and fast&amp;rdquo; evaluation, but we have more constraints to evaluate, and this ultimately hurts the runtime, despite the simplicity.&lt;/li>&lt;li>Pigeonhole is the slowest of the bunch, and this is primarily/probably because it is not incremental, so every time it is evaluated, it is somewhat expensive to do so. We won&amp;rsquo;t look at it again, as it scales poorly for larger puzzles.&lt;/li>&lt;/ul>&lt;h3 id="larger-instances">Larger instances&lt;/h3>&lt;p>Well, our sophisticated implementation didn&amp;rsquo;t exactly kick butt in terms of time on the smaller instances. Let&amp;rsquo;s look at 25x25 sudokus next. Here, the less sophisticated variants start getting rather slow, so to keep things simple I&amp;rsquo;m capping their runtime at 10 minutes. The timeouts aren&amp;rsquo;t too frequent yet:&lt;/p>&lt;ul>&lt;li>Basic: 6/500 runs timed out.&lt;/li>&lt;li>Binary: 19/500 runs timed out.&lt;/li>&lt;li>Sparse: 6/500 runs timed out.&lt;/li>&lt;/ul>&lt;p>&lt;img src="https://blog.dawnofthe.dad/plots/cdf-large-steps.png" alt="25x25 Sudoku - steps taken">&lt;/p>&lt;p>Looking at steps taken, as before, we can see that bipartite implementation is far smarter and takes way fewer steps than others. Pigeonhole is second best, as before. This isn&amp;rsquo;t too surprising, but perhaps what is interesting is how quickly the simpler implementations start to degrade.&lt;/p>&lt;p>&lt;img src="https://blog.dawnofthe.dad/plots/cdf-large-time.png" alt="25x25 Sudoku - time taken">&lt;/p>&lt;p>Looking at the runtime reinforces that story - the less sophisticated implementations complete about an order of magnitude faster when they&amp;rsquo;re &amp;ldquo;lucky&amp;rdquo;, but &lt;strong>many&lt;/strong> orders of magnitude slower when they are not (say, at 95 percentile). So, while on average a couple of these implementations are competitive, on occasion we can hit particularly bad runs that take many minutes to complete&amp;hellip; and binary, the simplest of them all, clearly is struggling to keep up. In contrast, the bipartite implementation is very steady, with basically all of the runs completing in 1.5 - 2 seconds. Pigeonhole isn&amp;rsquo;t quite as fast as bipartite, but still tends to hold up well against the simpler implementations. The runtime of the top few percentiles does get significantly worse though.&lt;/p>&lt;h3 id="even-larger-instances">Even larger instances&lt;/h3>&lt;p>The even larger, 36x36 set of sudokus, is where we can see the that the simpler approaches start consistently timing out after 10 minutes:&lt;/p>&lt;ul>&lt;li>Basic: 25/30 runs timed out.&lt;/li>&lt;li>Binary: 28/30 runs timed out.&lt;/li>&lt;li>Sparse: 24/30 runs timed out.&lt;/li>&lt;/ul>&lt;p>These make sense - based on the smaller instances we already noticed that all 3 of these tend to require many more steps, binary suffers from having too many finer-grained constraints to evaluate, basic is non-incremental, and sparse is only a slight improvement over basic. So none of them do well, binary is worse than the other two, while the incrementality of sparse over basic may be slightly helping (albeit the sample size is too small to be certain).&lt;/p>&lt;p>Only bipartite and pigeonhole implementations remain viable, with bipartite continuing to be in the lead:&lt;/p>&lt;p>&lt;img src="https://blog.dawnofthe.dad/plots/cdf-very-large-steps.png" alt="36x36 Sudoku - steps taken">&lt;/p>&lt;p>&lt;img src="https://blog.dawnofthe.dad/plots/cdf-very-large-time.png" alt="36x36 Sudoku - time taken">&lt;/p>&lt;h2 id="takeaways">Takeaways&lt;/h2>&lt;p>Like with many things, it comes down to trade-offs. In this case, choosing the right implementation of an &lt;em>all-different&lt;/em> constraint comes down to choosing between simplicity, speed, and consistent performance. Determining which of these is more important to you can help you choose the right implementation:&lt;/p>&lt;ul>&lt;li>Fast implementations are easy to understand, and can be &amp;ldquo;good enough&amp;rdquo; for smaller problems, but have unstable run times, and don&amp;rsquo;t scale well.&lt;/li>&lt;li>More sophisticated implementations are the opposite, they&amp;rsquo;re harder to understand and implement, don&amp;rsquo;t provide a ton of value on smaller problems, but truly shine on large problems, and have consistent performance characteristics to boot.&lt;/li>&lt;/ul>&lt;p>Lastly, it&amp;rsquo;s worth noting that more efficient algorithms for &lt;em>all-different&lt;/em> constraints and sudokus are out there, and I&amp;rsquo;ve yet to experiment with them. &lt;a href="https://www.ijcai.org/Proceedings/03/Papers/036.pdf">Regin&amp;rsquo;s all-different algorithm&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/Dancing_Links">Knuth&amp;rsquo;s Dancing links algorithm&lt;/a> are two examples of these, respectively.&lt;/p></description></item><item><title>Rubber Duck FTW</title><link>https://blog.dawnofthe.dad/posts/rubber-duck-ftw/</link><pubDate>Thu, 21 Sep 2023 22:16:25 -0700</pubDate><guid>https://blog.dawnofthe.dad/posts/rubber-duck-ftw/</guid><description>&lt;p>Rubber duck debugging is a well known debugging technique - it boils down to explaining the code to a rubber duck, whether a real one, or a coworker who unwittingly becomes the &amp;ldquo;rubber duck&amp;rdquo;. Halfway through the explanation the &amp;ldquo;Wait &amp;hellip; what?&amp;rdquo; moment pops up, you know where the bug is and you run off to fix it, potentially leaving your coworker wondering why you just ran off mid-sentence.&lt;/p>&lt;p>There are plenty of articles that talk about rubber duck debugging in detail, but why should this neat technique be restricted to &lt;em>just debugging&lt;/em>? I&amp;rsquo;ll explore one area in particular - applying this technique as a means to &lt;em>improve&lt;/em> existing code and design, rather than just for debugging.&lt;/p>&lt;h2 id="the-mighty-duck">The mighty duck&lt;/h2>&lt;p>Rubber duck debugging requires you to you walk through your code and explain it step by step, justifying what each bit of code is meant to do and how it is doing it. At some point you end up realizing that what you thought the code &lt;strong>ought to do&lt;/strong> and what the code &lt;strong>actually does&lt;/strong> don&amp;rsquo;t actually match, and that could be the bug!&lt;/p>&lt;p>Or maybe you misunderstood something. This may be an opportunity to improve your code, by adding a test, cleaning up a comment, or refactoring your code, so that next time you walk through the code the logic is more self-evident (as a side-note - I&amp;rsquo;m a big fan of &lt;a href="https://en.wikipedia.org/wiki/Self-documenting_code">self-documenting code&lt;/a> which significantly reduces the chance that your comments become a lie as your code changes, among other things).&lt;/p>&lt;p>OK, cool, so that&amp;rsquo;s &lt;em>mostly&lt;/em> just good ol&amp;rsquo; rubber duck debugging&amp;hellip; so what? I think that the same approach can be applied more broadly, specifically in the context of improving existing code and designs. The idea is the same as before, you walk through your code / design, explaining what it does and how to your rubber duck of choice, &lt;strong>and through this process you find opportunities to make things better&lt;/strong>. I alluded to that in the previous paragraph, where you&amp;rsquo;d be looking for a bug, but may find things along the way that could be improved. However, unlike regular debugging where you basically have to find and fix the bug, pragmatically, when would it be sensible to do such a walk-through?&lt;/p>&lt;h2 id="applying-to-code-maybe">Applying to code? Maybe&lt;/h2>&lt;p>The initial inclination may be that this isn&amp;rsquo;t worth the trouble at all, and, for majority of the cases &lt;em>pertaining to code&lt;/em>, it&amp;rsquo;s probably right: code is often either good-enough to serve its purpose as is, might be relatively short-lived, or otherwise uninteresting&amp;hellip; but there may be bits of code that are subtle, critical to the correctness / performance, or otherwise important. This type of code can be a great opportunity to step back, explain it to the rubber duck, and see if your argument is as clear and convincing as you thought it was. If it&amp;rsquo;s not, maybe you&amp;rsquo;re not understanding the problem fully yet? Maybe you applied a well-known algorithm, but don&amp;rsquo;t &lt;em>quite&lt;/em> follow how it all works, and you have a chance to take a step back, make the code clearer, or more optimized to your use-case? Maybe you can simplify the code? Or maybe you actually &lt;strong>proactively&lt;/strong> found a subtle bug that you haven&amp;rsquo;t thought of before, rather than reactively?&lt;/p>&lt;p>On the other hand, code reviews are an established practice and should catch many flaws, whether they are done by another person, or by yourself as you&amp;rsquo;re checking code in. While this is true, small tweaks that look sensible in isolation can result in correct, but clunky code. Would a more thorough review catch them? Probably. Is doing an extra pass worth the effort? &lt;em>Maybe&lt;/em>. You&amp;rsquo;ll want to apply your best judgement here, depending on importance of the code and its cleanliness to your project.&lt;/p>&lt;h3 id="example">Example&lt;/h3>&lt;p>This snippet of code is from my solver (with slight simplifications) and resulted as I piled on new features, like logging and the ability to keep track of solution cost:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Search&lt;/span>) &lt;span style="color:#a6e22e">Run&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">SolutionWithCost&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#a6e22e">done&lt;/span>, &lt;span style="color:#a6e22e">solution&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">step&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">done&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#a6e22e">solved&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">logDone&lt;/span>(&lt;span style="color:#a6e22e">solved&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">solved&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">problem&lt;/span>.&lt;span style="color:#a6e22e">SolutionFound&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">SolutionWithCost&lt;/span>{&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#a6e22e">Solution&lt;/span>: &lt;span style="color:#a6e22e">solution&lt;/span>,&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#a6e22e">Cost&lt;/span>: &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">problem&lt;/span>.&lt;span style="color:#a6e22e">CurrentCost&lt;/span>()}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>While this code is fairly straight-forward, it can be cleaned up by merging the two if-statements on lines 7 and 10. This doesn&amp;rsquo;t functionally change anything, but cleans things up and removes confusion because the two if-statement branches really &lt;strong>are&lt;/strong> equivalent, even though at a glance that&amp;rsquo;s not immediately obvious.&lt;/p>&lt;h2 id="ducks-and-docs">Ducks and docs&lt;/h2>&lt;p>Every once in a while you&amp;rsquo;re likely to end up writing some kind of a technical document. It might be a README file, a design document explaining what your API does, or, as the case was with the example above, a &lt;a href="https://blog.dawnofthe.dad/posts/search-algo-in-go/">blog post&lt;/a>. As you are writing such a doc you&amp;rsquo;ll likely find yourself inadvertently following similar steps to the rubber duck technique - you&amp;rsquo;ll be explaining to the readers what your code / API / thing does, and as you are doing this it&amp;rsquo;s a great time to check whether what you are describing is accurate. For example, are the edge-cases of your API behaving as the documentation says they should? Do you have tests to prove that? Or does the complex logic you are describing to the reader actually match what the code does? In either case, and particularly as time passes and the underlying code changes (possibly due to changes made by you &lt;strong>and others&lt;/strong>), creating and updating these docs can be a good opportunity to double check that things are still as you intended.&lt;/p>&lt;p>The other and more important benefit of such an exercise is that not only is it an opportunity to double-check &lt;strong>specific bits&lt;/strong>, which you would be looking at anyway as you incrementally build up the codebase, but it is also an opportunity to confirm that &lt;strong>together&lt;/strong> all these changes are consistent and easy to understand. You may learn that the API(s) your code exposes, parts of which in isolation look reasonable, have inconsistencies, which could lead to confusion and difficulty using them properly. Or you might find code paths that separately are performant, but combined are not. Or you might discover that complexity of the whole system is getting out of hand and a refactoring or even bigger structural changes are overdue.&lt;/p>&lt;p>In any event, unlike proactive code reviews, which may be overkill, keeping documentation updated is useful for you and your users, so such doc updates should be done anyway - why not use this as an opportunity to run the doc by your trusty old rubber duck, and see if things could be improved? So the next time you&amp;rsquo;re updating the README, explain it to the rubber duck, too.&lt;/p>&lt;h3 id="another-example">Another example&lt;/h3>&lt;p>As I was writing &lt;a href="https://blog.dawnofthe.dad/posts/visualizing-search/">the post about visualizing search&lt;/a> and describing the protocol I was forced to poke around a bit harder than I had before, and look at the exact messages being sent over the wire. While I&amp;rsquo;ve previously done a good deal of testing (admittedly, largely manual because integration testing with websockets &lt;em>sounds&lt;/em> hard) and the code &lt;em>did work&lt;/em>, it turned out it did so in a goofy way - the sudoku data was sent transposed, so the data would describe columns first, and the client would then transpose them back so that on the frontend rows appeared first, instead of columns. Thinking back on this, this rings a bell, I recall being confused, but figuring &amp;ldquo;eh, easy enough to transpose back on the client&amp;rdquo;, pushing the change and &amp;hellip; forgetting about this little bit of mess I&amp;rsquo;ve created. Writing about how it worked made me feel bad enough to go and actually fix it properly.&lt;/p>&lt;h3 id="and-oldie-but-a-goodie">And oldie, but a goodie&lt;/h3>&lt;p>Lastly, don&amp;rsquo;t forget about the very relevant code-metric: &lt;a href="https://www.osnews.com/story/19266/wtfsm/">WTF per minute&lt;/a>; if you&amp;rsquo;re skimming the code / docs and something looks off, it&amp;rsquo;s a good chance to dig a bit deeper, understand why, and make it less &lt;em>off&lt;/em> for the next person that reads that code / doc.&lt;/p></description></item><item><title>Visualizing Search</title><link>https://blog.dawnofthe.dad/posts/visualizing-search/</link><pubDate>Sat, 09 Sep 2023 12:50:58 -0700</pubDate><guid>https://blog.dawnofthe.dad/posts/visualizing-search/</guid><description>&lt;p>Part of the appeal of building a solver for the fourth time (?!) for me is that it&amp;rsquo;s fun to watch how it solves the problem. While it&amp;rsquo;s possible and quick to hack something up on command line, the results aren&amp;rsquo;t that pretty and can&amp;rsquo;t be easily shared. In this post I&amp;rsquo;ll talk about building a frontend that talks to the backend via websockets and produces an animated visualization of how the search is solving the problem.&lt;/p>&lt;p>The scope of this post, and my initial frontend, is generalized NxN sudokus, and this first iteration of the frontend focused on largely non-interactive visualization. You can &lt;a href="https://dawnofthe.dad/ndoku">try it out for yourself online&lt;/a>. I&amp;rsquo;ll talk about building up more interactive solvers for regular &lt;a href="https://dawnofthe.dad/sudoku">sudoku&lt;/a> and &lt;a href="https://dawnofthe.dad/crossword">crosswords&lt;/a> separately.&lt;/p>&lt;h2 id="a-little-background">A little background&lt;/h2>&lt;p>I rewrote the solver a few times, for various reasons, but before this latest rewrite only my very first solver had any kind of visualization. It was built during my grad studies and, largely due to my familiarity with Java at the time, was built with a crude, but useful Java UX. So when I felt the itch to write some code, building up a UX this time around was high on the list of things to do. This time my language of choice for the solver was Go, and with Go being an awesome language for servers (web and otherwise), and my &lt;strong>very&lt;/strong> dated front-end web dev experience, it felt like building up the solver in Go as a backend and having a JS web frontend would be the way to go.&lt;/p>&lt;h2 id="basic-flow">Basic flow&lt;/h2>&lt;p>The basic flow between the user, browser and the backend is this:&lt;div class="mermaid">sequenceDiagram participant User participant Browser participant Backend User->>Browser: Presses "Next solution" button Browser->>Backend: Start solving loop Solving Backend->>Browser: State updates every 30ms until solved end&lt;/div>&lt;/p>&lt;p>This doesn&amp;rsquo;t allow user to do much beyond hitting the button and watching the solver do its thing, but this is sufficient for trying out things like different &lt;a href="https://blog.dawnofthe.dad/posts/heuristics/">heuristics&lt;/a>, &lt;a href="https://blog.dawnofthe.dad/posts/constraint-propagation/">constraint propagation algorithms&lt;/a>, and so on, and seeing how they impact search. You can check these out &lt;a href="https://dawnofthe.dad/ndoku">online&lt;/a>, just be sure to open the configuration to adjust solver behavior.&lt;/p>&lt;h2 id="backend-and-frontend">Backend and frontend&lt;/h2>&lt;p>Backend&amp;rsquo;s primary job is to solve problems thrown at it, but, to keep things simple and not add another dependency, it also happens to be a basic web server and serves up the largely static web pages, such as the initial screen for the NxN sudoku that the user sees. More importantly though, the backend also allows the frontend to connect to it via websockets, which are used to send state updates and basic control messages between the frontend and the backend. The page served by the backend has two key elements: the canvas where we will draw the state, and the button that lets the user kick off the solving process.&lt;/p>&lt;p>The frontend is in JS and is quite basic. It does the following:&lt;/p>&lt;ul>&lt;li>Waits for the user to press the button, and once pressed connects via a websocket to the backend. The websocket is kept open until either the user leaves the page or no more solutions can be found.&lt;/li>&lt;li>For each message from the backend it will interpret the message per the rudimentary protocol, described below, and handle it.&lt;/li>&lt;li>Most messages are state updates, and so JS will update the state of the sudoku board, represented by the large canvas element. This is the &amp;ldquo;Solving&amp;rdquo; loop in the sequence diagram above.&lt;/li>&lt;li>There are a couple of other messages that the backend can send - one when a solution has been found and the user can search for more by hitting the button again, and another when no more solutions exist.&lt;/li>&lt;/ul>&lt;p>By the way, while I&amp;rsquo;m still waffling as to whether open-source the backend, JS frontend code is effectively open-sourced in that it is unobfuscated and easily readable. If you&amp;rsquo;d like, you can check it out &lt;a href="https://dawnofthe.dad/static/js/ndoku.js">here&lt;/a>.&lt;/p>&lt;h2 id="websockets-and-the-protocol">Websockets and the protocol&lt;/h2>&lt;p>Since the bulk of communication between the backend and the frontend will be state updates that is the most interesting bit of the protocol, while the rest is truly simple and borderline silly. Let&amp;rsquo;s do these basic control messages first to get them out of the way; there are two categories: frontend telling backend it wants the next solution, and backend telling the frontend something &lt;em>other&lt;/em> than a state update. Since the frontend doesn&amp;rsquo;t do anything other than says &amp;ldquo;Give me next solution&amp;rdquo; the protocol is &lt;em>literally&lt;/em> that any message from the frontend to the backend will make the solver look for the next solution. The backend to frontend messages are almost as simple, as there are only two mentioned above, and they&amp;rsquo;re sent as strings. Could I do something shorter/smarter? Yes. Was it worth the effort? &lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it">YAGNI&lt;/a> says &amp;ldquo;nah&amp;rdquo; &amp;hellip; at least until something breaks horribly and I&amp;rsquo;ll be forced to fix this.&lt;/p>&lt;p>State updates are more interesting - let&amp;rsquo;s see what the solver knows about the current state and how that can be passed along as part of the protocol:&lt;/p>&lt;ul>&lt;li>The solver knows the state of each cell in the NxN sudoku (represented internally by a variable). Naturally, there are NxN cells.&lt;/li>&lt;li>A given cell can either be assigned a value, from 1 to N, or it can be unassigned.&lt;/li>&lt;li>In my initial implementation that was basically what was sent through the websocket - either 1 through N, or 0 for unassigned state&amp;hellip; but the solver knows something else about unassigned cells, namely how many values are in that variable&amp;rsquo;s live domain (remember &lt;a href="https://blog.dawnofthe.dad/posts/constraint-propagation/">constraint propagation&lt;/a>?), so it&amp;rsquo;d be cool if we could show that on the frontend, too. We can do that fairly easily - for each cell that is not assigned we can use values N+1 through 2*N to pass this info on to the frontend. And that&amp;rsquo;s exactly what the protocol does.&lt;/li>&lt;/ul>&lt;p>TL;DR state updates are just a message with N*N bytes, and each byte mapped to values / remaining-live-values as per above.&lt;/p>&lt;p>A couple of quick notes:&lt;/p>&lt;ul>&lt;li>Could the state updates be compressed? Yes, definitely. For now though, I am looking for ways to shed CPU cycles where possible, and between that and YAGNI it seemed unnecessary to apply compression on the server followed by decompression on the client. I may change my mind as this lack of compression is in part why the online version of NxN sudoku solver is limited to 36x36 sudokus, while in practice my E2 GCE instance could likely handle at least 64x64 without blowing up.&lt;/li>&lt;li>Won&amp;rsquo;t this protocol break for N &amp;gt; 121? Yup&amp;hellip; but with the current implementation 100x100 already takes close to an hour on my rather dated machine, so redesigning the protocol for grids 144x144 and larger isn&amp;rsquo;t a priority now.&lt;/li>&lt;/ul>&lt;h3 id="example-message">Example message&lt;/h3>&lt;p>Let&amp;rsquo;s take a quick look at the classic 9x9 sudoku. If you want to follow along you can open &lt;a href="https://dawnofthe.dad/ndoku">this link&lt;/a>, set the size to 9x9, open DevTools and head over to the network tab, assuming that you&amp;rsquo;re in Chrome. After you hit &amp;ldquo;Next solution&amp;rdquo;, you&amp;rsquo;ll see the grid get populated. On the DevTools network tab you&amp;rsquo;ll also note a bunch of messages sent over the websocket, as shown below. We&amp;rsquo;ll examine one of them.&lt;/p>&lt;p>&lt;img src="https://blog.dawnofthe.dad/sudoku-protocol-example.png" alt="Sudoku protocol example">&lt;/p>&lt;p>Here you can see how the first message to the server was just an empty string - as I mentioned above any message will trigger a solve, and I just happen to be sending an empty string to do so. That&amp;rsquo;s not too interesting though, so we&amp;rsquo;ll grab the 4th binary message &lt;strong>from the server&lt;/strong>. Let&amp;rsquo;s copy it as hex. You should get this:&lt;/p>&lt;pre tabindex="0">&lt;code>0102030f0f0f0f0f0f0f0f0f1212121212120f0f0f121212121212111111121212121212111111121212121212111111121212121212111111121212121212111111121212121212111111121212121212&lt;/code>&lt;/pre>&lt;p>As this is hex each two characters represent a value of a cell. Let&amp;rsquo;s look at the first few cells:&lt;/p>&lt;pre tabindex="0">&lt;code>0x010x020x030x0f0x0f0x0f0x0f0x0f0x0f0x0f0x0f0x0f0x12&lt;/code>&lt;/pre>&lt;p>So what are we looking at? The backend assigns variables to values in lexicographic order, as we asked it to. The first message will be just the initial, empty grid, so after 4 messages we should get variables for cells (0, 0), (0, 1) and (0, 2) assigned; in other words, the first three squares in the top row. And that&amp;rsquo;s exactly what we see above, they are assigned to 1, 2 and 3, respectively.&lt;/p>&lt;p>The next few columns are a bit more interesting - we see a whole bunch of &lt;code>0x0f&lt;/code> values. Remember how the protocol uses values beyond N to represent that variables are unassigned and have some number of live values left? This is telling us that we have &lt;code>0x0f - 9 = 6&lt;/code> live values left in the domain of these variables. There are 9 of these:&lt;/p>&lt;ul>&lt;li>The first 6 cover the remainder of the row; i.e., cells (0, 3) through (0, 8).&lt;/li>&lt;li>The next three values will cover the cells on row 1 (zero index based) of the 3x3 box that the solver has just populated; i.e., cells (1, 0), (1, 1) and (1, 2), and they too, only have 6 live values.&lt;/li>&lt;/ul>&lt;p>Finally, we get to cell (1, 3) which is not affected by current assignments and has all 9 live values (&lt;code>0x12 - 9 = 9&lt;/code>).&lt;/p>&lt;p>The rest of the message follows the same pattern as the above, as do all the other messages that the backend sends our way. Finally, the &lt;strong>very last message&lt;/strong> also has the somewhat lazy plain-text string stating that more solutions are available, which I&amp;rsquo;ve also mentioned above.&lt;/p>&lt;h2 id="search-state-visualization">Search state visualization&lt;/h2>&lt;p>With the protocol defined and telling us what is being sent over the websocket, all that&amp;rsquo;s left is to render the sudoku. It&amp;rsquo;s easiest to describe this by walking through some code, so here&amp;rsquo;s the key bit:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Variable &amp;#34;edge&amp;#34; refers to the size of the sudoku;&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// i.e. the &amp;#34;N&amp;#34; in NxN.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">edge&lt;/span>; &lt;span style="color:#a6e22e">y&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">edge&lt;/span>; &lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">idx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">edge&lt;/span>;&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">view&lt;/span>.&lt;span style="color:#a6e22e">getUint8&lt;/span>(&lt;span style="color:#a6e22e">idx&lt;/span>);&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">edge&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">fillStyle&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">unassignedColors&lt;/span>[&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">edge&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>];&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">fillStyle&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">valueColors&lt;/span>[&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>];&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">fillRect&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">edgeLen&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">edgeLen&lt;/span>, &lt;span style="color:#a6e22e">edgeLen&lt;/span>, &lt;span style="color:#a6e22e">edgeLen&lt;/span>);&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The two for-loops just go through the grid and give us an index into the &lt;code>view&lt;/code>, which is just a JS &lt;code>DataView&lt;/code>. That&amp;rsquo;s the value of that particular cell, and its meaning it mentioned in the protocol section above. Now that we have it, we know whether to render that as a set cell, or one that still hasn&amp;rsquo;t been set and has live values in its domain - that&amp;rsquo;s the if statement. We look up the color, and set that cell to that color.&lt;/p>&lt;p>With regards to the colors for assigned and unassigned variables (i.e., &lt;code>valueColors&lt;/code> and &lt;code>unassignedColors&lt;/code> in the code above, respectively), if you look at the source code a bit higher, you&amp;rsquo;ll see this bit:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">valueColors&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">generateHslaColors&lt;/span>(&lt;span style="color:#ae81ff">70&lt;/span>, &lt;span style="color:#ae81ff">60&lt;/span>, &lt;span style="color:#a6e22e">edge&lt;/span>);&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">unassignedColors&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">generateGrayscaleColors&lt;/span>(&lt;span style="color:#ae81ff">30&lt;/span>, &lt;span style="color:#a6e22e">edge&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That basically creates a slew of &amp;ldquo;rainbow&amp;rdquo; colors mapping red to low values and violet to high values for variables / cells that are set, and grayscale colors for unset variables, with white meaning all live values are possible and dark gray meaning very few live values remain. So what we&amp;rsquo;ll see is that any given row, horizontal or block in the NxN sudoku has unique &amp;ldquo;rainbow&amp;rdquo; colors, and as search gets deeper and deeper down the search tree the unassigned variables turn darker and darker as &lt;a href="https://blog.dawnofthe.dad/posts/constraint-propagation/">constraint propagation&lt;/a> eliminates impossible values from live domains of unassigned variables.&lt;/p>&lt;p>And that&amp;rsquo;s it! Hopefully this helps you understand how visualization works, what the image at the top of this post is about, and gives you some ideas how you might go about visualizing interesting algos.&lt;/p></description></item><item><title>Heuristics</title><link>https://blog.dawnofthe.dad/posts/heuristics/</link><pubDate>Thu, 07 Sep 2023 17:23:19 -0700</pubDate><guid>https://blog.dawnofthe.dad/posts/heuristics/</guid><description>&lt;p>Constructive search needs to explore an exponentially large search space. In order to have any hope to find a solution, or prove that none exist, it is crucial that this exploration is done in a smart way. Problems that constructive search is applied to are NP-complete, so we don&amp;rsquo;t have an exact way of making smart decisions about this exploration. Instead, we rely on heuristics to make &lt;em>generally good&lt;/em> decisions, that will hopefully help us either find a solution, or prove that one does not exist quickly.&lt;/p>&lt;p>There are two categories of these heuristics - variable ordering heuristics, and value ordering heuristics. Let&amp;rsquo;s take a closer look at how they work.&lt;/p>&lt;h2 id="decisions-decisions-">Decisions, decisions &amp;hellip;&lt;/h2>&lt;p>You may recall this little bit of code from an &lt;a href="https://blog.dawnofthe.dad/posts/search-algo-in-go/">earlier post&lt;/a> where we covered the search algorithm:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">decision&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">makeNextDecision&lt;/span>()&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This call to &lt;code>makeNextDecision()&lt;/code> is made whenever we enter a new node in the search tree. To give a quick reminder, at this point we may have made other decisions at the ancestor nodes in the search tree and are exploring some subspace of the overall search space. We&amp;rsquo;ll keep making decisions until we either find a solution, or exhaust the possibilities. Also, as another quick reminder, when I say &amp;ldquo;make a decision&amp;rdquo;, I am referring to picking an unassigned variable and a value from its live domain to try next. You can check out the older posts if you need a refresher on &lt;a href="https://blog.dawnofthe.dad/posts/constraint-propagation/">live domains, constraint propagation&lt;/a> and &lt;a href="https://blog.dawnofthe.dad/posts/solver-basics/">solver basics in general&lt;/a>.&lt;/p>&lt;p>&lt;img src="https://blog.dawnofthe.dad/decisions.jpg#float-right" alt="Oblig meme">For most non-trivial problems it becomes important to make good decisions, or our search can run exponentially long trying to find a solution, while also thrashing and unable to prove that no solutions exist. A quick observation is that at any point during the search we are either in a search space that contains a solution, or does not. This distinction, while obvious, can be useful when talking about decision making; i.e., heuristics:&lt;/p>&lt;ul>&lt;li>When search lands &lt;strong>in a subspace that has no solutions, good heuristics let it quickly confirm that no solutions exist&lt;/strong>, so that search can move else sooner. Such subspaces are called &lt;em>infeasible&lt;/em>.&lt;/li>&lt;li>When search lands &lt;strong>in a subspace that does have solutions, good heuristics lead search towards those solutions&lt;/strong>. These subspaces are called &lt;em>feasible&lt;/em>.&lt;/li>&lt;/ul>&lt;p>Decisions involve choosing a variable and a live value to try out, and similarly heuristics are commonly viewed as two parts - one type for choosing a variable, and another to choose a value. They are called &lt;em>variable ordering&lt;/em> and &lt;em>value ordering&lt;/em> heuristics, respectively.&lt;/p>&lt;h2 id="variable-ordering-heuristics">Variable ordering heuristics&lt;/h2>&lt;p>Let&amp;rsquo;s glance at the two states search can be in again:&lt;/p>&lt;ul>&lt;li>&lt;strong>Subspace contains a solution&lt;/strong>: we&amp;rsquo;ll need to assign all variables to get to the solution, but if the one we pick is assigned to a value that doesn&amp;rsquo;t land on a solution, we&amp;rsquo;ll want to prove infeasibility quickly.&lt;/li>&lt;li>&lt;strong>Subspace that does not contain a solution&lt;/strong>: we simply want to prove infeasibility quickly.&lt;/li>&lt;/ul>&lt;p>Variable ordering heuristics have no control over values, so their goal is simple, how can we determine whether the current subspace has no solutions, quickly? There are a slew of variable ordering heuristics, but the good news is that they all appear to fall under the same category - fail fast. The idea is, we have to pick &lt;em>some&lt;/em> variable to assign, and if we are in infeasible space, picking a variable that lets us fail fast is best, as we can move on to another subspace quickly. Interestingly, this principle is adopted elsewhere, like systems design, agile methodologies, and probably a few other things unrelated to CSPs. Back to CSPs and constructive search though: the most basic flavor of this technique is to choose a variable with fewest live values left in its domain, and the rationale is - if we&amp;rsquo;re infeasible, we&amp;rsquo;ll need to try all values, the fewer there are, the faster it will be to eliminate them.&lt;/p>&lt;p>There are quite a few flavors / improvements upon this most basic &amp;ldquo;fail fast&amp;rdquo; heuristic, so I&amp;rsquo;ll mention a few:&lt;/p>&lt;ul>&lt;li>&lt;strong>dom/deg&lt;/strong>: in addition to picking the variable with fewest live values, we&amp;rsquo;ll also divide by the number of constraints the variable is involved in. The more constrained the variable, the more likely we are to choose it; the exact formula for picking the next variable is literally # of live values divided by # of constraints the variable is part of, and we pick the unassigned variable that gives the lowest number using this formula.&lt;/li>&lt;li>&lt;strong>dom/ddeg&lt;/strong>: similar to the above, but also accounts for dynamic nature of search (&amp;ldquo;ddeg&amp;rdquo; stands for &amp;ldquo;dynamic degree&amp;rdquo;) by only counting constraints that involve unassigned variables (that&amp;rsquo;s a slight oversimplification, see &lt;a href="https://hal.science/hal-03096124/document">this&lt;/a> for full details on this and lots more).&lt;/li>&lt;li>&lt;strong>dom/wdeg&lt;/strong>: extends dom/ddeg heuristic by also keeping track of when a constraint causes a wipeout of a variable, and using that as part of the evaluation/choosing the variable. For details, again, please refer to proper scientific articles like &lt;a href="https://hal.science/hal-03096124/document">the above&lt;/a>. This is the variable ordering heuristic used by my solver.&lt;/li>&lt;/ul>&lt;h2 id="value-ordering-heuristics">Value ordering heuristics&lt;/h2>&lt;p>In my by now rather dated experience (decade plus&amp;hellip; yikes), value ordering heuristics largely only matter when we are in feasible subspace, and their goal is to find the variable assignment that would lead search towards the solution. As many variables may still need to be assigned, another way of framing this is that a good value ordering heuristic will avoid landing us in infeasible search subspaces, which can be expensive to recover from.&lt;/p>&lt;p>You can see how value ordering heuristics are in some way opposite of variable ordering heuristics - they are more useful when in feasible spaces, and aim to find a solution, so it&amp;rsquo;s not too surprising that for value ordering heuristics to be effective they prefer selecting values that are more likely to succeed first, and defer choosing other values until later. General-purpose value ordering heuristics can achieve this by preferring values that essentially leave the problem least constrained. For classes of problems where estimating complexity of a subproblem can be done efficiently, a good value ordering heuristic can be obtained by preferring values that lead to sub-problems that are most likely to be solvable.&lt;/p>&lt;p>All that being said, there&amp;rsquo;s a simple and lazy (and somewhat unsatisfying) way out - it&amp;rsquo;s often fastest and simplest to just choose randomly. This tends to outperform other simple heuristics like lexicographic, and could be made deterministic for the sake of reproducibility by seeding the RNG. This is the value ordering heuristic used by my solver, albeit I&amp;rsquo;ve dabbled with specialized ones for crosswords, so far to no avail.&lt;/p>&lt;h2 id="choosing-both-together">Choosing both together?&lt;/h2>&lt;p>It may be useful to choose the variable and the value together, rather than separately, since we&amp;rsquo;ll need them both for making a decision.&lt;/p>&lt;p>&lt;img src="https://blog.dawnofthe.dad/porque-no-los-dos.jpg#float-right" alt="&amp;hellip;and one more meme">&lt;/p>&lt;p>Consider the following example:&lt;/p>&lt;ul>&lt;li>We have unassigned variables: A, B, and C.&lt;/li>&lt;li>A and C have 3 live values in their domains, and B has 5.&lt;/li>&lt;li>In this case, applying the &amp;ldquo;fail fast&amp;rdquo; variable ordering heuristic will result in a tie between A and C, with either of them being good candidates for being assigned next. Looking deeper at the potential values of each of these variables could be a useful way to break this tie. For example, it could be the case that one of A&amp;rsquo;s values could be particularly promising, so we may want to select A and that value together.&lt;/li>&lt;/ul>&lt;p>I&amp;rsquo;ve not seen this done in CSPs, but I wouldn&amp;rsquo;t be surprised if that happened more recently, or was done with other optimization approaches, like MIP or SAT. If you&amp;rsquo;re familiar with this, drop me a note (see social links at the top)!&lt;/p>&lt;h2 id="lexicographic-ordering">Lexicographic ordering&lt;/h2>&lt;p>For both kinds of heuristics lexicographic ordering is primarily used to get a predictable and easy to understand run of the solver. That can be nice for basic sanity checking or toy problems, like the 4-queens problem from the &lt;a href="https://blog.dawnofthe.dad/posts/solver-basics/">earlier post&lt;/a>. It can also lead to some fun visualizations, like the 100x100 sudoku below, but typically are of little use for hard problems.&lt;/p>&lt;p>&lt;img src="https://blog.dawnofthe.dad/100x100-sudoku.png" alt="100x100 lexicographically first sudoku">This took about 1 hour to generate on my home machine. You can make a smaller one with lexicographic ordering using the &lt;a href="https://dawnofthe.dad/ndoku">the online version&lt;/a>, in about a second.&lt;/p></description></item><item><title>Constraint Propagation</title><link>https://blog.dawnofthe.dad/posts/constraint-propagation/</link><pubDate>Mon, 04 Sep 2023 15:59:06 -0700</pubDate><guid>https://blog.dawnofthe.dad/posts/constraint-propagation/</guid><description>&lt;p>Constraint propagation is one of the key mechanisms that allows constructive search to efficiently explore huge search spaces. It does so by applying constraints whenever search state changes to remove parts of search space that cannot contain solutions.&lt;/p>&lt;p>In this post I&amp;rsquo;ll cover two constraint propagation techniques: forward checking and arc consistency. As these techniques apply to variables&amp;rsquo; live domains, I&amp;rsquo;ll start by defining what that is first, and then dive into constraint propagation itself.&lt;/p>&lt;h2 id="variables-and-domains">Variables and domains&lt;/h2>&lt;p>Variables in CSPs are associated with their &lt;em>domains&lt;/em>, for example, in &lt;a href="https://blog.dawnofthe.dad/posts/solver-basics/">N-queens problem&lt;/a> each variable represents a queen in a particular column and its domain represents the N possible rows that the queen may be assigned to; in order to find a solution to the CSP we must assign variables to exactly one value from their respective domains such that no constraints are violated. Before we discuss constraint propagation it would help to define another concept - &lt;em>live domain&lt;/em>.&lt;/p>&lt;p>&lt;strong>Live domain&lt;/strong> of a variable V is a subset of values from V&amp;rsquo;s domain that may still be part of a solution. Unlike domain of a variable, which is static and defined once as part of the CSP, live domain changes throughout the search:&lt;/p>&lt;ul>&lt;li>Decisions made during search can directly affect a variable&amp;rsquo;s live domain. For example, choosing to assign a queen to a particular row, let&amp;rsquo;s call it &lt;em>k&lt;/em>, will mutate its live domain to be just that value; i.e., {&lt;em>k&lt;/em>}.&lt;/li>&lt;li>Similarly, some decisions may result in &lt;em>pruning&lt;/em> values from the live domain, like stating that a queen cannot be on row &lt;em>m&lt;/em>, and that would lead us to remove &lt;em>m&lt;/em> from the live domain of the variable for that queen.&lt;/li>&lt;li>Constraint propagation is the other, key mechanism that prunes values from live domain of variables, by removing values that are guaranteed to not be part of a solution given the current search state.&lt;/li>&lt;li>The cases above all remove values from live domains, and apply as we traverse deeper into the search tree. When we go back up the search tree it is important to remember to restore variables&amp;rsquo; live domains.&lt;/li>&lt;/ul>&lt;h2 id="constraint-propagation">Constraint propagation&lt;/h2>&lt;p>As search traverses deeper into a particular subtree a few things happen:&lt;/p>&lt;ul>&lt;li>Decisions made on the path from the current node to the root reduce the search space, with the goal of finding a solution, or proving none exists in this subtree.&lt;/li>&lt;li>As those decisions are made, and as mentioned above, live domains of variables will be reduced, reflecting the reduction of search space as the search traverses deeper down the search tree.&lt;/li>&lt;/ul>&lt;p>&lt;strong>Constraint propagation&lt;/strong> is the idea that when live domains of variables change, we have the opportunity to examine constraints of the CSP and use those to &lt;em>further&lt;/em> reduce live domains by removing (aka pruning) values that would otherwise be guaranteed to violate constraints. For example, with N-queens, whenever we assign some queen to row &lt;em>k&lt;/em> we know that the other queens cannot be on row &lt;em>k&lt;/em> now without being attacked, and can remove &lt;em>k&lt;/em> from their live domains. Let&amp;rsquo;s look at the two constraint propagation algorithms, and then look at how one might code those up.&lt;/p>&lt;h3 id="forward-checking">Forward checking&lt;/h3>&lt;p>Forward checking is a relatively simple and effective constraint propagation technique that can be summed up as follows:&lt;/p>&lt;ol>&lt;li>When a variable V&amp;rsquo;s live domain changes, grab all constraints that involve the variable.&lt;/li>&lt;li>Look at each constraint one at a time. For each such constraint C, look at all the &lt;em>other&lt;/em> variables that are part of the constraint.&lt;/li>&lt;li>For each such variable U ≠ V of C look at the live domain of U and see which values of U&amp;rsquo;s live domain can still be a part of a solution without violating C. Any values that don&amp;rsquo;t meet this criterion are removed from U&amp;rsquo;s live domain.&lt;/li>&lt;/ol>&lt;p>This last part is a bit tricky. Let&amp;rsquo;s look at the simplest case first, where we have binary constraints, like the diagonal constraint from N-queens, and just assigned one of the variables (i.e., placed one of the queens):&lt;/p>&lt;ul>&lt;li>In this case, as we apply forward checking, we want to adjust the live domain of the other queen to remove values (row numbers) that would now be diagonally under attack.&lt;/li>&lt;li>We&amp;rsquo;d apply this to all the constraints that the assigned queen is involved in, thus updating live domains of possibly many other queens.&lt;/li>&lt;/ul>&lt;p>The more general case can have constraints with many variables, like &lt;em>all-different&lt;/em> constraint, and possibly only partial live-domain changes, rather than reductions to a single assigned value. In this case we need to rely on &lt;strong>supports&lt;/strong> of a constraint. A support is defined as a set of assignments of values to all variables involved in a constraint that do not violate the constraint. Coming back to constraint propagation, the last step of forward checking means that as we look at live domains of variables, we should remove any values that can no longer be supported given the current state of search.&lt;/p>&lt;p>Let&amp;rsquo;s explain this last bit with an example, this time looking at &lt;em>all-different&lt;/em> constraint defined on 4 queens, which tells us that all 4 queens must be assigned to unique rows. Now, suppose that:&lt;/p>&lt;ul>&lt;li>Initially Q1 (using the same notation as in the &lt;a href="https://blog.dawnofthe.dad/posts/solver-basics/">older post&lt;/a>) has live domain of {1, 2, 3}, Q2 has live domain of {1, 2}, Q3 has live domain of {3, 4} and Q4 has live domain of {3}.&lt;/li>&lt;li>If we assign Q1 to 3, we will end up removing 3 from live domain of Q3 and Q4.&lt;/li>&lt;/ul>&lt;p>One interesting and important bit about this simple example is that this would mean that Q4 now has an empty live domain. This is referred to as a &lt;em>wipeout&lt;/em> and means that we won&amp;rsquo;t be able to find a solution in this part of the search space &lt;strong>and must backtrack&lt;/strong>. This is one of the key benefits of constraint propagation - by doing a bit of work up-front, not only can we reduce work further down in the search tree, but we can sometimes detect infeasibility (i.e., absence of a solution) early, and backtrack right away.&lt;/p>&lt;h3 id="arc-consistency">Arc consistency&lt;/h3>&lt;p>Arc consistency is another constraint propagation technique that is more powerful (and more expensive to evaluate) than forward checking. Tersely speaking it:&lt;/p>&lt;ol>&lt;li>Keeps track of variables whose live domains have changed. It starts by seeding a set S of variables with the variable that was affected by the latest decision.&lt;/li>&lt;li>Removes a variable from S and applies forward checking as described above. As this is done, any variables with live domain reductions are added to S.&lt;/li>&lt;li>Keeps going until S becomes empty, meaning no further live domain changes happen.&lt;/li>&lt;/ol>&lt;p>Arc consistency generally leads to fewer backtracks than forward-checking, as infeasibility can be detected faster, however arc consistency requires more constraint evaluations and can be significantly slower per iteration. As such, whether you should use forward checking or arc consistency tends to depend on the problem &lt;strong>and&lt;/strong> the implementation of constraints. Benchmarking generally can help you choose the right constraint propagation approach.&lt;/p>&lt;h3 id="code">Code&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#75715e">// propagate returns true when no live domains are wiped out.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Search&lt;/span>) &lt;span style="color:#a6e22e">propagate&lt;/span>(&lt;span style="color:#a6e22e">arcConsistency&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#a6e22e">changedVars&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span>]&lt;span style="color:#66d9ef">bool&lt;/span>{}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#a6e22e">changedVars&lt;/span>[&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">decision&lt;/span>.&lt;span style="color:#a6e22e">variable&lt;/span>] = &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> len(&lt;span style="color:#a6e22e">changedVars&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#a6e22e">nextV&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pop&lt;/span>(&lt;span style="color:#a6e22e">changedVars&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">problem&lt;/span>.&lt;span style="color:#a6e22e">ConstraintsFor&lt;/span>(&lt;span style="color:#a6e22e">nextV&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">cv&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Variables&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#a6e22e">liveDomainChanged&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#a6e22e">cv&lt;/span>.&lt;span style="color:#a6e22e">LiveDomain&lt;/span>().&lt;span style="color:#a6e22e">ForEachValue&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Supported&lt;/span>(&lt;span style="color:#a6e22e">cv&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">prune&lt;/span>(&lt;span style="color:#a6e22e">cv&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span> &lt;span style="color:#a6e22e">liveDomainChanged&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> })&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">liveDomainChanged&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">cv&lt;/span>.&lt;span style="color:#a6e22e">WipedOut&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">arcConsistency&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> &lt;span style="color:#a6e22e">changedVars&lt;/span>[&lt;span style="color:#a6e22e">cv&lt;/span>] = &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The block above applies constraint propagation, and the logic between forward checking and arc consistency is really just about adding changed variables to &lt;code>changedVars&lt;/code> on lines 23-25, and is gated by the bool passed to &lt;code>propagate()&lt;/code> where &lt;code>arcConsistency&lt;/code> being false means that forward checking will be applied instead. The key parts are:&lt;/p>&lt;ul>&lt;li>Lines 3-5 initialize &lt;code>changedVars&lt;/code> and keep going so long as this &amp;ldquo;set&amp;rdquo; isn&amp;rsquo;t empty.&lt;/li>&lt;li>Line 6 grabs the next variable &lt;code>nextV&lt;/code> to process.&lt;/li>&lt;li>Line 7 goes through all the constraints &lt;code>c&lt;/code> of &lt;code>nextV&lt;/code>.&lt;/li>&lt;li>Line 8 goes through all variables &lt;code>cv&lt;/code> of &lt;code>c&lt;/code>.&lt;/li>&lt;li>Lines 9-22 apply the core of forward checking algorithm described above by checking all values of &lt;code>cv&lt;/code>&amp;rsquo;s live domain for supports of constraint &lt;code>c&lt;/code>, any that are not supported are removed, and if the entire domain of &lt;code>cv&lt;/code> is wiped out (made empty), &lt;code>propagate()&lt;/code> ends indicating that no solution exists.&lt;/li>&lt;/ul>&lt;h3 id="example-with-4-queens">Example with 4-queens&lt;/h3>&lt;p>Hopefully by now the header image makes sense - it&amp;rsquo;s an example of applying forward checking to 4-queens after placing the first queen, Q1, on row #1. The cells with &amp;ldquo;X&amp;quot;s show all cells that Q1 attacks, with &amp;ldquo;X&amp;quot;s in red indicating the result of forward checking (and black &amp;ldquo;X&amp;quot;s are eliminated simply because we assigned Q1 to row #1).&lt;/p>&lt;p>Looking at how &lt;code>propagate()&lt;/code> would behave for both algorithms:&lt;/p>&lt;ul>&lt;li>&lt;code>propagate(false)&lt;/code> applies forward checking and would proactively prune live domains of the remaining queens, as per above. It would still allow search to continue as it wouldn&amp;rsquo;t detect any wipeouts.&lt;/li>&lt;li>&lt;code>propagate(true)&lt;/code> applies arc consistency and would go quite a bit further and detect that placing Q2 on row #3 is not viable, because the diagonal constraint between Q2 and Q3 isn&amp;rsquo;t supported by Q3&amp;rsquo;s live domain, and would thus remove row #3 from Q2&amp;rsquo;s domain. It would then notice that Q3 cannot be on row #4, because row #4 now must be taken by Q2 (i.e., the all-different constraint isn&amp;rsquo;t supported), leaving Q3 with only row #2. And finally it would note that Q4 cannot go on row #2 because Q3 must be on row #2, and the diagonal attack prevents Q4 from going on row #3, thus wiping out Q4&amp;rsquo;s live domain and causing &lt;code>propagate&lt;/code> to prevent us from stepping any further into this subtree at all.&lt;/li>&lt;/ul>&lt;p>The interesting bit here is that you can see that even with such a simple example arc consistency can eliminate non-viable assignments earlier, but at higher computational cost per iteration of &lt;code>propagate()&lt;/code>.&lt;/p></description></item><item><title>Search Algo in Go</title><link>https://blog.dawnofthe.dad/posts/search-algo-in-go/</link><pubDate>Sun, 03 Sep 2023 10:24:10 -0700</pubDate><guid>https://blog.dawnofthe.dad/posts/search-algo-in-go/</guid><description>&lt;p>My previous couple of posts talked about &lt;a href="https://blog.dawnofthe.dad/posts/solver-intro/">what the solver does (solves CSPs)&lt;/a>, &lt;a href="https://blog.dawnofthe.dad/posts/solver-basics/">how to model a problem as a CSP, and how the search tree is built&lt;/a> as the solver searches for a solution. In this post I will expand on the details of search by outlining the key data structures and bits of code. The backend is written in &lt;a href="https://go.dev">Go lang&lt;/a>, and so are all of the code snippets here.&lt;/p>&lt;h2 id="nodes-in-the-search-tree">Nodes in the search tree&lt;/h2>&lt;p>We&amp;rsquo;ll be building a search tree, which is composed of nodes. We&amp;rsquo;ll also need to track a couple of things as we build the search tree. Here they are:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">nodeState&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> (&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#a6e22e">freshNode&lt;/span> &lt;span style="color:#a6e22e">nodeState&lt;/span> = &lt;span style="color:#66d9ef">iota&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#a6e22e">solutionFound&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#a6e22e">assignmentTried&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#a6e22e">unassignmentTried&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">decision&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#a6e22e">variable&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">model&lt;/span>.&lt;span style="color:#a6e22e">Variable&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#75715e">// When valueAssigned is true variable = value, else variable != value.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">valueAssigned&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#a6e22e">parent&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">node&lt;/span> &lt;span style="color:#75715e">// nil at root&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#a6e22e">nodeState&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#a6e22e">decision&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">decision&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>node&lt;/code> struct above lets us:&lt;/p>&lt;ul>&lt;li>Keep track of the node&amp;rsquo;s &lt;code>parent&lt;/code>, so we can easily go back up the tree when backtracking,&lt;/li>&lt;li>Keep track of the &lt;code>nodeState&lt;/code>, which we&amp;rsquo;ll use to tell us what to do when we visit or revisit a node,&lt;/li>&lt;li>Keep track of the &lt;code>decision&lt;/code> we made at this node, which we can use to evaluate constraints, and, when all variables are assigned, to tell us what the full solution is, by walking backwards up the tree and collapsing all the decisions that led to the solution into a full assignment of values to variables.&lt;/li>&lt;/ul>&lt;h2 id="building-the-search-tree">Building the search tree&lt;/h2>&lt;p>My code has two key functions: &lt;code>Run()&lt;/code>, which is the top-level function called by external clients, like the web server, and &lt;code>step()&lt;/code>, which is a single step in the search tree where we look at the current &lt;code>node.state&lt;/code> and decide what to do next. Here they are, along with the &lt;code>Search&lt;/code> struct that they belong to:&lt;/p>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-golang" data-lang="golang">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Search&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> &lt;span style="color:#a6e22e">root&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">node&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#a6e22e">current&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">node&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Search&lt;/span>) &lt;span style="color:#a6e22e">Run&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Solution&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> &lt;span style="color:#a6e22e">done&lt;/span>, &lt;span style="color:#a6e22e">solution&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">step&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">done&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">solution&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Search&lt;/span>) &lt;span style="color:#a6e22e">step&lt;/span>() (&lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Solution&lt;/span>) {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">freshNode&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">decision&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">makeNextDecision&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">decision&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span> &lt;span style="color:#75715e">// When there are no more variables to assign s.makeNextDecision()&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// returns nil. That also means that all variables are assigned&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// and we found a solution.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span> = &lt;span style="color:#a6e22e">solutionFound&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Assignments&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">decision&lt;/span>.&lt;span style="color:#a6e22e">variable&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">decision&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">checkConstraints&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31&lt;/span>&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span> = &lt;span style="color:#a6e22e">assignmentTried&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">node&lt;/span>{&lt;span style="color:#a6e22e">parent&lt;/span>: &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34&lt;/span>&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">solutionFound&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35&lt;/span>&lt;span> &lt;span style="color:#75715e">// We can get here if we&amp;#39;re resuming from a previous solution.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// We&amp;#39;ll resume by backtracking out of this node.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">parent&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38&lt;/span>&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">assignmentTried&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">undoLastStep&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40&lt;/span>&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">decision&lt;/span>.&lt;span style="color:#a6e22e">valueAssigned&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">decision&lt;/span>.&lt;span style="color:#a6e22e">variable&lt;/span>.&lt;span style="color:#a6e22e">Prune&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">decision&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>)&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">checkConstraints&lt;/span>() {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46&lt;/span>&lt;span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span> = &lt;span style="color:#a6e22e">unassignmentTried&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">node&lt;/span>{&lt;span style="color:#a6e22e">parent&lt;/span>: &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>}&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49&lt;/span>&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">unassignmentTried&lt;/span>:&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50&lt;/span>&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">root&lt;/span> {&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51&lt;/span>&lt;span> &lt;span style="color:#75715e">// We exhausted the search space, no solutions are left.&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52&lt;/span>&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">undoLastStep&lt;/span>()&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55&lt;/span>&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">current&lt;/span>.&lt;span style="color:#a6e22e">parent&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57&lt;/span>&lt;span> }&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58&lt;/span>&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59&lt;/span>&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, &lt;code>Run()&lt;/code> is exceptionally straight-forward - it simply keeps calling &lt;code>step()&lt;/code> until &lt;code>step()&lt;/code> says it is &lt;code>done&lt;/code>, which happens either because a solution has been found, or the entire search space has been exhausted, and no more solutions as exist.&lt;/p>&lt;p>On the other hand, &lt;code>step()&lt;/code> is a bit more complicated - it looks at the state that the current node is in and:&lt;/p>&lt;ul>&lt;li>For &lt;code>freshNode&lt;/code> search makes a decision; if that&amp;rsquo;s &lt;code>nil&lt;/code> then we have a solution. Otherwise, we assign the variable, check constraints, and if no constraints are violated, create a child node and move into it. If at least one constraint is violated no solution can be found in this branch and we will need to try the other branch, relying on &lt;code>Run()&lt;/code> to enter &lt;code>assignmentTried&lt;/code> on next step.&lt;/li>&lt;li>For &lt;code>solutionFound&lt;/code> - this state will be entered when &lt;code>Run()&lt;/code> is called again after finding a solution. In this case search simply backtracks, so that search can continue to the next solution.&lt;/li>&lt;li>For &lt;code>assignmentTried&lt;/code> search flips the assignment to &lt;em>unassignment&lt;/em> (e.g., if the assignment was A = 5 it&amp;rsquo;ll become A ≠ 5). This is where the binary nature of the search tree comes from, that I mentioned in my other posts. Search will then prune the unassigned value from the variable&amp;rsquo;s live domain, and check if any constraints are broken (we&amp;rsquo;ll talk about live domains in another post, for now just think of this as removing this value as a possibility for the subtree rooted at the current node). If no constraints are broken search will traverse deeper into the search tree, otherwise no solution can be found and &lt;code>step()&lt;/code> will return, relying on &lt;code>Run()&lt;/code> to trigger a backtrack on the next step.&lt;/li>&lt;li>For &lt;code>unassignmentTried&lt;/code> search knows that at this point no more solutions can be found in the current subtree and it needs to backtrack. If search detects that it is already at the root node, that means it has nowhere to backtrack to and there are no more solutions at all.&lt;/li>&lt;/ul>&lt;p>And that&amp;rsquo;s the heart of the constructive search algorithm. A few important things are left out for now though, which make what is essentially just DFS effective. I&amp;rsquo;ll cover these later, but I will touch on them briefly here:&lt;/p>&lt;ul>&lt;li>Applying &lt;em>constraint propagation&lt;/em> after making decisions, rather than simply checking constraints, and tracking results of propagation, so that they may be retracted upon backtracking. This will allow search to quickly eliminate parts of search space that are guaranteed to not contain solutions.&lt;/li>&lt;li>Heuristics and decision making in general are alluded to with &lt;code>s.makeNextDecision()&lt;/code>, but not fleshed out. This part delegates the heavy lifting to the variable and value ordering heuristics, and while those can be as simple as lexicographic, can get relatively sophisticated.&lt;/li>&lt;li>Supporting &lt;em>backjumping&lt;/em> rather than just simple backtracking.&lt;/li>&lt;/ul></description></item><item><title>Solver basics</title><link>https://blog.dawnofthe.dad/posts/solver-basics/</link><pubDate>Sat, 02 Sep 2023 12:49:25 -0700</pubDate><guid>https://blog.dawnofthe.dad/posts/solver-basics/</guid><description>&lt;p>In the &lt;a href="https://blog.dawnofthe.dad/posts/solver-intro/">previous post&lt;/a> I&amp;rsquo;ve given a quick overview of what the solver is about, and in this post I&amp;rsquo;ll dive a little bit deeper into the subject, using N-queens with just 4 queens as an example problem. More specifically, I&amp;rsquo;ll fully specify the problem by defining the variables and constraints, and then walk through what a simple search would do, ultimately finding a solution.&lt;/p>&lt;h2 id="closer-look-at-n-queens-problem">Closer look at N-queens problem&lt;/h2>&lt;p>To recap the previous post, the goal of solving the N-queens problem is to find a way to place N queens on an NxN chessboard in a way that the queens are not attacking each other. I also mentioned that a common way of modeling this problem is by having over variable per queen, where variable M represents the queen in column M, and this model choice effectively ensures that no pair of queens share the same column. One thing I omitted earlier is that each variable is also associated with its &lt;em>domain&lt;/em>, which is basically the set of values that could be assigned to the variable. For N-queens the domain of all variables is {1, &amp;hellip;, N}. A value from this domain simply represents the row, from 1 to N, that a particular queen is assigned to.&lt;/p>&lt;p>Constraints for N-queens get a little bit more interesting: by the definition of variables we know that no pair of queens will attack each other vertically, since they cannot share the same column, but we still need to make sure they will not attack each other horizontally and diagonally.&lt;/p>&lt;ul>&lt;li>&lt;strong>Preventing horizontal attacks&lt;/strong> is the same thing as making sure that each queen is assigned to a different row, and this is a perfect example of applying the &lt;em>all-different&lt;/em> constraint. There are different ways of implementing such a constraint, but the net outcome is the same - all variables that are part of such a constraint must be assigned to different values. So we&amp;rsquo;ll define one &lt;em>all-different&lt;/em> constraint and apply it to all of the 4 queens, as this prevents them from horizontally attacking each other.&lt;/li>&lt;li>&lt;strong>Preventing diagonal attacks&lt;/strong> will require doing a bit of math to define the constraint: we know that a pair of queens share a diagonal if we can draw a line between them with a slope of 1 or -1, and we want to prevent that. Using the &amp;ldquo;rise over run&amp;rdquo; formula we can express that as $$abs((y_2-y_1) / (x_2 - x_1)) \ne 1$$ Let&amp;rsquo;s get rid of division, because dealing with floats is not fun: $$abs(y_2 - y_1) \ne abs(x_2-x_1)$$ With that, we just need to add constraints for each pair of queens, so that gives us $${n \choose 2} = n(n-1)/2$$ binary constraints.&lt;/li>&lt;/ul>&lt;p>This completes the definition of an N-queens problem.&lt;/p>&lt;h2 id="search-and-n-queens">Search and N-queens&lt;/h2>&lt;p>Now that we&amp;rsquo;ve defined the N-queens problem, let&amp;rsquo;s see what searching for a solution looks like. We&amp;rsquo;ll look at the smallest non-trivial N-queens problem with a solution, which happens to be with 4 queens.&lt;/p>&lt;p>There are a couple more things to mention about search:&lt;/p>&lt;ul>&lt;li>Making the right decisions during search is critical. For this, typically two types of heuristics are used: &lt;em>variable ordering heuristics&lt;/em>, which I mentioned in the previous post, and &lt;em>value ordering heuristics&lt;/em>. They tell search which variable to assign next, and to what value. Here we&amp;rsquo;ll assume that both are using lexicographic ordering, meaning we&amp;rsquo;ll assign queen in column 1 first (call it Q1), then in columns 2, 3 and finally 4. We&amp;rsquo;ll do the same for values; i.e., rows that we assign the queens to.&lt;/li>&lt;li>The other thing done during search is called &lt;em>constraint propagation&lt;/em>, which basically says &amp;ldquo;after search assigns a value, it will proactively adjust other unassigned variables by removing values that would break a constraint&amp;rdquo;. That might sound a bit complicated, so for now, we&amp;rsquo;ll assume that we don&amp;rsquo;t do this, and only evaluate constraints when picking the next value.&lt;/li>&lt;/ul>&lt;p>We can now look at the example search for the 4-queens problem:&lt;/p>&lt;p>&lt;img src="https://blog.dawnofthe.dad/4q-tree.svg" alt="Search tree for the 4 queens problem">&lt;/p>&lt;p>In the diagram above, labels next to nodes represent the decision made to reach the node (aside from root node); e.g.; &amp;ldquo;Q2:3&amp;rdquo; means &amp;ldquo;assign queen in column #2 to row 3&amp;rdquo;. Because we are using lexicographic variable ordering you&amp;rsquo;ll also note that each level in the tree corresponds to assigning the next queen. In cases where we find it impossible to assign a value to the next queen without violating a constraint, we&amp;rsquo;ll label those with &amp;ldquo;X&amp;rdquo;; e.g., &amp;ldquo;Q4:X&amp;rdquo; means &amp;ldquo;we couldn&amp;rsquo;t place queen in column 4 as every possible spot is already under attack&amp;rdquo;. Those are always followed by a backtrack.&lt;/p>&lt;h3 id="explaining-search-steps">Explaining search steps&lt;/h3>&lt;ul>&lt;li>Start with no decisions made at the root of the search tree.&lt;/li>&lt;li>Assign Q1 to 1; i.e., to place queen in column #1 on row #1. Then create a new child node and step into it.&lt;/li>&lt;li>Now we&amp;rsquo;ll assign Q2. Placement of Q1 means that Q2 cannot be on row #1 (horizontal constraint, aka all different constraint, is violated) or on row #2 (diagonal constraint is violated). So we&amp;rsquo;ll place it on row #3, create another child node, and step into it.&lt;/li>&lt;li>Now we&amp;rsquo;re &lt;em>attempting&lt;/em> to assign Q3. This is where things get more interesting: row #1 is under attack by Q1, and rows #2 through #4 are under attack by Q2. No decision can be made and we&amp;rsquo;ve hit a dead end. This is where &lt;em>backtracking&lt;/em> must take place, which basically means going back to the parent of the current node and stating that the decision it made earlier leads to no solutions. This is the leftmost leaf node with an X on it in the diagram.&lt;/li>&lt;li>We&amp;rsquo;re now back to finding a new value for Q2, as assigning it to row #3 didn&amp;rsquo;t work. Search will try row #4, and, as usual, create a child node for that and step into it.&lt;/li>&lt;li>We&amp;rsquo;re trying to assign Q3 again. Row #1 is still under attack by Q1, however, now that we&amp;rsquo;ve moved Q2 to row #4, Q3 can go on row #2. We&amp;rsquo;ll make this decision, create a new child node, and step into that.&lt;/li>&lt;li>We&amp;rsquo;re now down to our last queen - Q4! Alas, looking for a viable place to put it we&amp;rsquo;ll see that row #1 is taken by Q1, row #2 by Q3, row #3 is under attack diagonally by Q3, and row #4 is already taken by Q2. We cannot place Q4 without attacking one of the other queens, and we must backtrack.&lt;/li>&lt;li>Q3 must be moved from row #2, but it has nowhere else to go - we can&amp;rsquo;t place it on row #3 because Q1 attacks that diagonally, and #4 is already under attack by Q2. We must backtrack again.&lt;/li>&lt;li>Q2 must now be moved from row #4, but Q2 has exhausted possible places it could be placed, so we backtrack once again, and end up at the root node.&lt;/li>&lt;li>After all that work we learned that Q1 cannot be on row #1 and we&amp;rsquo;re back at the root node. We must try the next value, row #2, create a new child and step into it. Thankfully, the rest of the search is backtrack-free.&lt;/li>&lt;li>Q2 can only be on row #4 because Q1 attacks all others. So we place it, create a new child and step into that.&lt;/li>&lt;li>Q3 can only be on row #1 now. We do that, and create a new child + step into that again.&lt;/li>&lt;li>Q4 is last, and luckily it can be placed on row #3. All the variables are now assigned and none of the constraints are violated, and thus we have a solution!&lt;/li>&lt;/ul>&lt;p>Side-note: my solver always makes binary decisions, so the logic would have been more like &amp;ldquo;try X, and if that fails, try &lt;em>not&lt;/em> X&amp;rdquo;. The net result would still be the same, but we would have a few more nodes in the search tree. I&amp;rsquo;ll cover the more exact mechanics of my solver separately.&lt;/p>&lt;h2 id="summary">Summary&lt;/h2>&lt;p>We&amp;rsquo;ve looked at how N-queens problem can be modeled as a constraint satisfaction problem, and how search traverses the search space by incrementally building up a search tree. We saw how the constraints prevent us from visiting parts of the tree that have no solutions, and how we recover from failure to find a solution in subtrees.&lt;/p></description></item><item><title>Solver intro</title><link>https://blog.dawnofthe.dad/posts/solver-intro/</link><pubDate>Sat, 26 Aug 2023 22:43:00 +0000</pubDate><guid>https://blog.dawnofthe.dad/posts/solver-intro/</guid><description>&lt;p>The underlying general purpose solver is the most interesting and most complex part of the backend; it&amp;rsquo;s also the thing I have now rewritten 3 times for various reasons. So I&amp;rsquo;m going to talk about that a bit: what it does, why it is interesting and challenging to build, and where it is at today.&lt;/p>&lt;h2 id="the-problem">The problem&lt;/h2>&lt;p>The solver is designed to solve &lt;a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem">constraint satisfaction problems&lt;/a>; aka CSPs. These problems are generally expressed by some number of variables with constraints on these variables. Here are a couple of examples of CSPs:&lt;/p>&lt;ul>&lt;li>&lt;p>&lt;strong>N-queens problem&lt;/strong>: for an NxN chess board, how can one position the queens such that none of them are attacking each other? A common way of expressing this as a CSP is to have one variable per column (because having more than one queen per column clearly violates the requirement that queens should not attack each other) and constraints that ensure that no two queens share a row, or a diagonal.&lt;/p>&lt;/li>&lt;li>&lt;p>&lt;strong>Sudoku&lt;/strong>: for a 9x9 grid, how can one fill in the grid with digits from 1 to 9 such that no row, column, or block has the digit appear more than once? A way to model this as a CSP is to have one variable per cell, so 81 variables total, and for each row, horizontal and block an &lt;em>all-different&lt;/em> constraint. Sudokus can also be generalized to NxN grids; e.g., 25x25 sudoku has cells which can be filled in with a value between 1 and 25 and 25 rows, columns, and blocks.&lt;/p>&lt;/li>&lt;/ul>&lt;h2 id="the-solver">The solver&lt;/h2>&lt;p>There are a few different kinds of solvers for CSPs, the kind I have built is a constructive solver which has the ability to enumerate all solutions to a CSP, and similarly, guarantee that no solutions exist when that is the case. Here&amp;rsquo;s a quick rundown in bullet-form of how it works:&lt;/p>&lt;ul>&lt;li>The core algorithm is building a tree that searches for a solution by making decisions, and after making a decision seeing if a solution still exists.&lt;/li>&lt;li>A decision is basically of the form &amp;ldquo;I think I can put the first queen on row #2&amp;rdquo;. Once a decision is made it holds until the solver either finds a solution that includes that decision, or proves that no solution exists with that decision.&lt;/li>&lt;li>When the solver does learn that no solutions exist based on an earlier decision, it backtracks; i.e., undoes that decision.&lt;/li>&lt;li>This algorithm will thus try all possibilities until an answer is found, or no answer is proven to exist.&lt;/li>&lt;/ul>&lt;p>TL;DR: the algo is basically just DFS (depth first search). Easy peasy, right?&lt;/p>&lt;p>&amp;hellip; wait, the number of possible states gets pretty obscene, doesn&amp;rsquo;t it? Sure does! So how do we have any hope of finding a solution? Well, we&amp;rsquo;ll need to be smart about how we explore the possible states (aka the search space):&lt;/p>&lt;ul>&lt;li>&lt;p>When making a decision we can be more careful about what that decision is. For example, we may want to pick a queen that only has two possible spots where it won&amp;rsquo;t be attacked. This is an example of &lt;em>first fail&lt;/em> variable ordering heuristic.&lt;/p>&lt;/li>&lt;li>&lt;p>After making a decision, like &amp;ldquo;first queen goes on row #2&amp;rdquo;, we can deduce that placing other queens on the same row doesn&amp;rsquo;t make any sense, and not attempt doing so. This is an example of &lt;em>constraint propagation&lt;/em>. Conveniently, this makes it easier for us to choose the next queen (see previous bullet point).&lt;/p>&lt;/li>&lt;li>&lt;p>We can get smart about recovering from failing to find a solution. An example of this is &lt;em>backjumping&lt;/em>, where rather than going back to the latest decision, i.e., simply &lt;em>backtracking&lt;/em>, we jump further back and skip parts of the search tree that are guaranteed to not have a solution.&lt;/p>&lt;/li>&lt;/ul>&lt;p>I&amp;rsquo;ll cover these in separate posts, but for now hopefully this gives you an idea how the simplistic-looking DFS algorithm can be extended and handle traversing rather obscene search spaces.&lt;/p>&lt;h3 id="why-its-hard-to-build">Why it&amp;rsquo;s hard to build&lt;/h3>&lt;p>In short, because the search space is huge, optimization becomes critical. This applies to just about every step of the search process, from efficiently representing the problem and the search state, to efficiently updating the state and auxillary data structures, to quickly and correctly applying the techniques above, like constraint propagation and backjumping. I&amp;rsquo;ll cover these in more detail later as I intend to write some posts about different kinds of &lt;em>all-different&lt;/em> constraints, constraint propagation in general, and backjumping vs backtracking.&lt;/p>&lt;h3 id="where-it-is-today">Where it is today&lt;/h3>&lt;p>The solver runs on an E2 instance in Google Cloud, on freebie quota. As such, there are significant limitations to the CPU and RAM, yet it is still able to easily chew through most 15x15 crosswords and generalized NxN sudokus, up to 36x36 in size. The solver itself also supports finding &lt;em>the best solution&lt;/em> and not just any solution, which requires providing an &lt;em>objective function&lt;/em> as part of the problem, however this isn&amp;rsquo;t yet surfaced through the site. An example application would be picking words for a crossword that are more common and avoiding other words, like abbreviations. There are also other, &amp;ldquo;infrastructural&amp;rdquo; improvements, which I may get to in the future. I may also look to apply the solver to a new class of problems, but I&amp;rsquo;m not sure what those will be yet.&lt;/p>&lt;p>With that, I&amp;rsquo;ll close this post out with a quick plug for my solver for &lt;a href="https://dawnofthe.dad/ndoku">NxN sudoku&lt;/a> where you can see that by applying the techniques mentioned here the solver is able to find a solution for a 25x25 sudoku in a couple of seconds. In contrast, with a pure brute-force algorithm, we may need to consider an enormous number of states: $$(25 \times 25) ^ {25} = 7.889 \times 10^{69}$$&lt;/p></description></item><item><title>Why tho</title><link>https://blog.dawnofthe.dad/posts/why-tho/</link><pubDate>Sat, 26 Aug 2023 21:00:03 +0000</pubDate><guid>https://blog.dawnofthe.dad/posts/why-tho/</guid><description>&lt;h2 id="what-and-why">What and why?&lt;/h2>&lt;p>First, the &lt;strong>what&lt;/strong>: &lt;a href="https://dawnofthe.dad">Dawn of the Dad&lt;/a> is basically the 2 solvers: one for &lt;a href="https://dawnofthe.dad/sudoku">sudoku&lt;/a>, and another for &lt;a href="https://dawnofthe.dad/crossword">building crosswords&lt;/a>. The first is largely complete, so most of my time now is dedicated to beefing up the crossword builder.&lt;/p>&lt;p>Now the &lt;strong>why&lt;/strong>: why build the site and why ramble in this blog?&lt;/p>&lt;ul>&lt;li>&lt;p>The site is my excuse to write some code, both to stay sharp and because I like doing it, solve some algorithmically interesting problems, and revisit some of the neat things I&amp;rsquo;ve learned about back in grad school. Originally, this spun off as a yet-another-rewrite of a general-purpose &lt;a href="https://en.wikipedia.org/wiki/Constraint_satisfaction_problem">CSP&lt;/a> solver, which then led to adding fairly ad hoc visualization, which led to building a web server, hacking up a websocket protocol, glueing it all together and finally hosting it on Google Cloud.&lt;/p>&lt;/li>&lt;li>&lt;p>The blog is largely meant to capture some of the interesting things I&amp;rsquo;ve learned along the way, like tuning / optimizing the solver and dealing with the hug of death I got from that one time my site briefly hit the front page of &lt;a href="https://news.ycombinator.com/news">Hacker News&lt;/a>.&lt;/p>&lt;/li>&lt;/ul>&lt;h2 id="post-frequency">Post frequency&lt;/h2>&lt;p>I&amp;rsquo;ll probably end up writing a bunch of posts relatively quickly at first, as I&amp;rsquo;m catching up on a year&amp;rsquo;s worth of potentially interesting things to write down, before I forget them. Once I do, I expect things to slow down a fair bit.&lt;/p></description></item></channel></rss>