<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Code and Design - Tag - Blog of the Dad</title>
        <link>https://blog.dawnofthe.dad/tags/code-and-design/</link>
        <description>Code and Design - Tag - Blog of the Dad</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 21 Sep 2023 22:16:25 -0700</lastBuildDate><atom:link href="https://blog.dawnofthe.dad/tags/code-and-design/" rel="self" type="application/rss+xml" /><item>
    <title>Rubber Duck FTW</title>
    <link>https://blog.dawnofthe.dad/posts/rubber-duck-ftw/</link>
    <pubDate>Thu, 21 Sep 2023 22:16:25 -0700</pubDate><author>
        <name>Andrei</name>
    </author><guid>https://blog.dawnofthe.dad/posts/rubber-duck-ftw/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/duck.jpg" referrerpolicy="no-referrer">
            </div><p>Rubber duck debugging is a well known debugging technique - it boils down to explaining the code to a rubber duck, whether a real one, or a coworker who unwittingly becomes the &ldquo;rubber duck&rdquo;. Halfway through the explanation the &ldquo;Wait &hellip; what?&rdquo; moment pops up, you know where the bug is and you run off to fix it, potentially leaving your coworker wondering why you just ran off mid-sentence.</p>
<p>There are plenty of articles that talk about rubber duck debugging in detail, but why should this neat technique be restricted to <em>just debugging</em>? I&rsquo;ll explore one area in particular - applying this technique as a means to <em>improve</em> existing code and design, rather than just for debugging.</p>]]></description>
</item></channel>
</rss>
